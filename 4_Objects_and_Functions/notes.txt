Objects and Functions
    - in JS objects and functions are VERY related. 
    - objects can have properties and methods attached 
      to them. properties include primitives like bools 
      strings, or numbers/variables. or other objects. 
      methods include functions. 

Objects and the dot operator:
    - you can use the dot operator to 
      traverse objects or you could use 
      the COMPUTED MEMBER ACCESS OPERATOR 
      just means the [] to do the same thing.

Objects and Object Literals:
    - often there is more then one way to do something.
    - you can use {} to do "new Object();" 
    - that's called an object literal. 

Framework Aside:
    - Faking Namespaces
    - Namespace is a container for variables and functions. 
    - typically used to keep variables and functions 
      with the same name separate. 
    - JS since it uses objects under the hood we can 
      fake namespaces. 
    - You will need to create all the layers in the object
      first before you add values or else you'll get 
      undefined error. 

JSON and object literals:
    - JSON is inspired by object literal syntax, but 
      its not exactly the same thing. 
    - in previous years, data was sent over the internet
      in various formats. The format that was landed upon for 
      a while was XML. When it comes to download times and 
      bandwidth, the XML unnecessary tag names were a big wasted 
      download bandwidth. If you dealing with a lot of data. 
      So people looked at JS object literals and thought, 
      hey that would be a really good way to send data! 
    - JSON is a subset of object literal syntax. 
    - JSON.stringify will convert the object to a JSON 
      string. JSON.parse will take a JSON string and 
      will convert it to a JS object. 
    
Functions ARE Objects:
    - has a CODE and NAME property. 
    - First Class Functions just means everything 
      you can do with other data types, you can do 
      with functions. Assign them to variables, pass 
      them around, create them on the fly etc. 
    - What does the function object look like? 
      well it resides in memory like everything else, 
      it looks like every other object, you can even 
      attach primitives, other objects and other functions 
      to a function since a function is an object. 
    - The Function object has a special NAME (or can be anonymous),
      then the CODE. The code that you write gets placed 
      into a special property of the Function Object. So 
      remember its an object. It has a CODE property and 
      a Name property. What's special about the Code property
      is that it is invocable (). 

Function Statements and Function Expressions:
    - An expression is a unit of code that results in 
      a VALUE. That's it. It doesn't have to save a 
      variable.
    - Statements like an if statement, takes an expression
      inside the () and the rest makes up a statement 
      to make up some work. 
    - a function statement is when you define a function
      and it doesn't resolve into a value until its 
      invoked and executed. It gets hoisted into memory
      etc. 
    - a function expression is when you assign a function 
      to a variable. It resolved or evaluted to a function. 
      Functions are objects right? so you can set it 
      to a variable. Thus making it a function expression. 
      it resolves to a value. 

By VALUE vs By REFERENCE:
    - all primitive types are by value, 
      all objects are by reference (can be mutated)
    - in both cases we are talking about variables.
    - lets say variable A has an address 0x001
    - lets say we run ==> b = a 
    - b would then point to a new address and make a 
      copy of A. This approach is called BY VALUE. 
      copying the value into two seperate spots in 
      memory. 
    - if we do it by reference, instead of b getting 
      a new location in memory, two names point to 
      the same address -> 0x001. This is by reference.
    - ALL OBJECTS WORK BY REFERENCE. 
    - PRIMITIVES WORK BY VALUE
    - mutate just means to change something. 
      immutable just means something can't be changed.
    - by reference will mutate a value. 
    - = operator will set up new memory space. 
      or a new address. The = operator will set up 
      a brand new memory space. 

Objects, Functions, and THIS keyword
    - 'this' will be pointing at a different object 
      or thing depending on how the function is invoked. 
      When 'this' is created during the creation phase 
      of an execution context. 
    - no programming language is perfect. The 'this'
      keyword jumping straight to the global object 
      past a method of an object is weird. But we can 
      use a pattern of defining a variable as this to 
      fight this. 

Collections of Anything - Arrays:
    - new Array(), or array literal using [] to define and delimit elements in array.
    - JS can hold different types in an array. 

Arguments
    - current code you'll see the arguments variable. 
    - in an execution env you'll see 'this', var env, 
      outer env, and 'arguments' which holds a list of all values
      of all params that you pass to a function your calling.
    - arguments are parameters you pass to a function. 
    - arguments act like an array, but its not. Its like 
      an array. So be careful. 
    - argumetns will soon be deprecated. soon 
      the SPREAD operator will be the thing to use. its 
      used using a series of three dots ...

Function overloading:
    - JS doesn't have this.
    - in other languages this means you can have a function 
      of the same name with different number of params. 
    - so instead you can take an approach of making another 
      function and pass the params you need. 

Syntax Parser:
    - it is reading my code char by char, and can even 
      make changes. including automatic semi-colon 
      insertion. 
    - if the syntax parser sees one char at a time, and 
      it sees a carriage return (invisible char for return)
      then it will auto insert a semi colon where it expects 
      it. That's why its optional.... because the syntax parser 
      does it for us. 

Whitespace:
    - will create invisible space in code. 
    - carriage returns, tabs, spaces etc
    - JS is very liberal with white space. 