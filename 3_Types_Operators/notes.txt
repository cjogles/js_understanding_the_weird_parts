Types and Operators
    - JS is special and different when it comes to 
      the types of data that variables hold and how 
      JS deals with them. 
    - DYNAMIC TYPING means that the programmer doesn't 
      tell the engine what type of data a variable 
      holds, it figures it out when the code is running
      Variables can hold different types of values because
      its all figured out during execution. 
    - C# or Java uses STATIC TYPING. The programmer
      would use a keyword like "bool" to show i 
      want a boolean type, and if you set that variable
      to a string you'll get an error. JS is 
      DYNAMICALLY TYPED so you get no errors when you 
      change the type. It's dynamic. You can define 
      a variable and assign it a string value, then 
      a bool then a number and its fine. 
    - this is powerful and can also cause problems 
      if you don't understand. 

Primitive Types
    - Although we don't set variable types directly, 
      there are 6 primitive types in JS. 
    - a primitive type is a type of data that represents
      a single value. (i.e. not an object or name/value pair)
      1. Undefined (represents lack of existence)
      2. Null (represents lack of existence) better to use
         when the programmer wants to set it up themselves. 
      3. Boolean (true or false)
      4. Number (floating point number only. can make math wierd)
      5. String (sequence of chars)
      6. Symbol (used in ES6, being constructed. wont talke about this here)


Operators
    - special functions that is syntactically written
      differently. generally take two params and return 
      one result. 
    - greater then or less then or equality ops return 
      a boolean back. 

Operator Precedence and Associativity
    - Operator precedence just means which operator 
      function gets called first when theirs more 
      then one on the same line of executable code. 
      functions are called in order of precedence. 
      Highest order wins. and JS engine will call it.
    - Operator Associativity just means what order 
      an operator gets called in. Either left to right
      associativity called left associativity, or right 
      to left associativity called right associativity. 
    - see operator precednence and associativity example
      in notes. 

Coercion
    - Just means the JS engine will convert a value 
      from one type to another type. this happens a lot 
      because JS is dynamically typed. 
    - the + operator can add numbers and concatenates 
      strings. What if I pass the + op two different 
      types?
    - if I pass a string and a number, then it will 
      return a string the number was coerced. In memory
      the number 1 and the string 1 don't look anything
      alike. But the JS engine knows its best guess to 
      coerce types. 

Comparison Operators
    - see example in app.JS
    - coercing undefined will return NaN
    - coercing Null will return 0. 
    - coercion, assocaitivity, and precedence 
      really plays a role in our comparison operation
    - but null does not equal 0... weird right? 
      but null < 1 returns true. This is all the case 
      with == operator. use strict equality 
      instead. It doesn't try to coerce values. 
    - try to compare things that are the SAME TYPE and 
      use ===.

Existence and Booleans
    - see example

Default Values
    - JS engine doesn't care if you don't pass 
      a default value to a function. It will just 
      return undefined. It will coerce your args 
      to undefined. 
    - I can use the || operator to return the first 
      value that evals to true. Be careful about 
      0 because that is coerced to false. 

Framework Aside:
Default Values:
    - 
